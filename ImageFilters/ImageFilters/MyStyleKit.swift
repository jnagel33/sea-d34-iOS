//
//  MyStyleKit.swift
//  ImageFilters
//
//  Created by jnagel on 4/9/15.
//  Copyright (c) 2015 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class MyStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var color: UIColor = UIColor(red: 0.017, green: 0.016, blue: 0.154, alpha: 1.000)
        static var gradientColor: UIColor = UIColor(red: 0.054, green: 0.059, blue: 0.311, alpha: 1.000)
        static var gradient: CGGradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [MyStyleKit.gradientColor.CGColor, MyStyleKit.gradientColor.blendedColorWithFraction(0.5, ofColor: MyStyleKit.color).CGColor, MyStyleKit.color.CGColor], [0, 0.4, 1])
        static var imageOfNavAndTabBarBackground: UIImage?
        static var navAndTabBarBackgroundTargets: [AnyObject]?
    }

    //// Colors

    public class var color: UIColor { return Cache.color }
    public class var gradientColor: UIColor { return Cache.gradientColor }

    //// Gradients

    public class var gradient: CGGradient { return Cache.gradient }

    //// Drawing Methods

    public class func drawNavAndTabBarBackground() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(0, 0, 168, 40))
        CGContextSaveGState(context)
        rectanglePath.addClip()
        CGContextDrawLinearGradient(context, MyStyleKit.gradient, CGPointMake(84, -0), CGPointMake(84, 40), 0)
        CGContextRestoreGState(context)
    }

    //// Generated Images

    public class var imageOfNavAndTabBarBackground: UIImage {
        if Cache.imageOfNavAndTabBarBackground != nil {
            return Cache.imageOfNavAndTabBarBackground!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(168, 40), false, 0)
            MyStyleKit.drawNavAndTabBarBackground()

        Cache.imageOfNavAndTabBarBackground = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfNavAndTabBarBackground!
    }

    //// Customization Infrastructure

    @IBOutlet var navAndTabBarBackgroundTargets: [AnyObject]! {
        get { return Cache.navAndTabBarBackgroundTargets }
        set {
            Cache.navAndTabBarBackgroundTargets = newValue
            for target: AnyObject in newValue {
                target.setImage(MyStyleKit.imageOfNavAndTabBarBackground)
            }
        }
    }

}



extension UIColor {
    func blendedColorWithFraction(fraction: CGFloat, ofColor color: UIColor) -> UIColor {
        var r1: CGFloat = 1.0, g1: CGFloat = 1.0, b1: CGFloat = 1.0, a1: CGFloat = 1.0
        var r2: CGFloat = 1.0, g2: CGFloat = 1.0, b2: CGFloat = 1.0, a2: CGFloat = 1.0

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
